// 定义蜂鸣器连接的引脚
int buzzer1 = 5; // D15, GPIO5 (A1 as digital)
int buzzer2 = 4; // D14, GPIO4 (A0 as digital)
int buzzer3 = 13; // D7, GPIO13
int buzzer4 = 12; // D6, GPIO12
int buzzer5 = 14; // D5, GPIO14

int melody1[] = {0, 494, 659, 740, 784, 880, 988, 247, 370, 587, 659, 659, 587, 523, 587, 294, 659, 740, 784, 880, 988, 494, 370, 587, 587, 261, 294, 784, 740, 196, 392, 659, 740, 784, 880, 988, 740, 587, 659, 1047, 587, 523, 392, 294, 988, 1047, 988, 880, 440, 392, 370, 880, 988, 740, 784, 659, 740, 784, 740, 784, 740, 587, 196, 220, 247, 220, 247, 196, 329, 220, 587, 784, 880, 988, 523, 784, 1175, 494, 294, 370, 1319, 196, 784, 1175, 587, 880, 784, 784, 880, 988, 1175, 587, 220, 294, 784, 587, 740, 784, 147, 196, 988, 880, 784, 880, 988, 740, 784, 1175, 659, 587, 523, 494, 440, 1319, 1175, 784, 1175, 196, 784, 880, 988, 1175, 1175, 587, 1175, 1047, 988, 880, 196, 294, 294, 392, 294, 294};
int durations1[] = {0, 818, 272, 272, 272, 545, 545, 545, 545, 545, 545, 545, 272, 272, 545, 545, 545, 272, 272, 545, 545, 545, 545, 545, 272, 272, 272, 272, 545, 545, 545, 545, 272, 272, 545, 545, 545, 954, 545, 545, 545, 272, 272, 545, 545, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 545, 272, 272, 545, 272, 272, 272, 272, 545, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 545, 545, 545, 545, 272, 272, 545, 545, 545, 545, 545, 545, 272, 272, 545, 545, 545, 545, 272, 545, 272, 545, 545, 272, 272, 272, 272, 272, 272, 272, 272, 545, 545, 545, 272, 272, 272, 272, 272, 272, 545, 545, 545, 545, 1090, 272, 272, 545, 545, 272, 818, 545, 272, 818, 545, 545, 545, 545, 409, 272, 272};
int melody2[] = {329, 392, 440, 740, 294, 261, 329, 294, 294, 247, 370, 329, 370, 392, 247, 247, 294, 659, 329, 294, 784, 185, 659, 370, 587, 370, 523, 659, 294, 220, 196, 494, 329, 261, 784, 392, 370, 659, 392, 370, 659, 329, 329, 784, 392, 587, 880, 392, 1175, 1047, 294, 587, 988, 988, 523, 659, 370, 784, 988, 494, 587, 587, 294, 523, 784, 494, 440, 392, 440, 784, 440, 659, 880, 294, 1047, 988, 659, 784, 659, 740, 659, 370, 784, 740, 740, 659, 587, 523, 784, 196, 220, 220};
int durations2[] = {0, 545, 545, 545, 818, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 681, 545, 545, 1090, 954, 545, 545, 545, 272, 272, 545, 545, 1090, 545, 272, 545, 545, 545, 545, 545, 1227, 272, 545, 545, 545, 545, 545, 272, 545, 545, 545, 545, 545, 272, 545, 545, 545, 545, 545, 409, 545, 545, 545, 272, 545, 272, 272, 272, 272, 545, 545, 545, 272, 545, 545, 545, 545, 545, 272, 272, 272, 545, 545, 272, 545, 272, 818, 545, 1363, 409, 272, 272};
int melody3[] = {370, 370, 294, 220, 261, 220, 196, 220, 294, 165, 165, 740, 220, 196, 220, 261, 247, 370, 494, 294, 494, 294, 392, 329, 247, 494, 392, 220, 220, 659, 523, 261, 494, 247, 587, 329, 494, 740, 659, 880, 784, 1175, 261, 784, 440, 494, 294, 659, 740, 740, 440, 494, 440, 587, 294, 196, 494, 370, 329, 587, 261, 329, 294, 587, 440, 494, 294, 392, 392, 261, 329, 294, 494, 196, 196};
int durations3[] = {0, 545, 545, 545, 545, 545, 545, 545, 545, 545, 681, 818, 818, 545, 1090, 545, 272, 545, 545, 545, 1090, 954, 545, 545, 545, 272, 818, 545, 1090, 545, 272, 545, 545, 1227, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 272, 545, 545, 545, 545, 545, 545, 272, 545, 545, 545, 545, 545, 545, 545, 545, 1636, 545, 545, 545, 1363, 272, 272};        
int melody4[] = {247, 247, 247, 196, 147, 494, 247, 294, 329, 247, 147, 294, 329, 247, 294, 220, 261, 261, 988, 988, 523, 880, 440, 392, 392, 329, 494, 392, 587, 740, 261, 196, 494, 370, 329, 392, 247, 261, 261, 494, 196, 294, 294, 294, 165, 147, 196, 370, 329, 247, 329, 196, 131, 196, 261, 220, 220};
int durations4[] = {0, 545, 545, 545, 545, 545, 272, 545, 545, 545, 545, 545, 545, 545, 1090, 954, 545, 545, 545, 545, 954, 272, 681, 272, 545, 545, 1227, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 818, 545, 545, 545, 545, 545, 545, 1090, 1090, 545, 545, 545, 545, 545, 545, 1636, 545, 545, 545, 545, 545};
int melody5[] = {247, 247, 247, 165, 587, 131, 147, 196, 196, 247, 196, 294, 147, 587, 131, 196, 247, 294, 370, 196, 147, 247, 147, 147, 196, 261, 294, 220, 196, 196};
int durations5[] = {0, 545, 545, 545, 545, 545, 545, 545, 545, 545, 272, 545, 545, 545, 545, 545, 545, 409, 545, 272, 545, 545, 272, 1090, 1090, 272, 545, 545, 545, 545, 545};

// 时间控制变量
unsigned long previousMillis1 = 0;
unsigned long previousMillis2 = 0;
unsigned long previousMillis3 = 0;
unsigned long previousMillis4 = 0;
unsigned long previousMillis5 = 0;
int noteIndex1 = 0;
int noteIndex2 = 0;
int noteIndex3 = 0;
int noteIndex4 = 0;
int noteIndex5 = 0;
bool finished1 = false;
bool finished2 = false;
bool finished3 = false;
bool finished4 = false;
bool finished5 = false;

void setup() {
  pinMode(buzzer1, OUTPUT);
  pinMode(buzzer2, OUTPUT);
  pinMode(buzzer3, OUTPUT);
  pinMode(buzzer4, OUTPUT);
  pinMode(buzzer5, OUTPUT);
}

void loop() {
  unsigned long currentMillis = millis();

  // 控制第一个蜂鸣器的音乐播放
  if (!finished1 && currentMillis - previousMillis1 >= durations1[noteIndex1]) {
    if (noteIndex1 < sizeof(melody1) / sizeof(int)) {
      previousMillis1 = currentMillis;
      tone(buzzer1, melody1[noteIndex1]);
    } else {
      noTone(buzzer1);
      finished1 = true;  // 标记旋律1播放完毕
    }
    noteIndex1++;
  }

  // 控制第二个蜂鸣器的音乐播放
  if (!finished2 && currentMillis - previousMillis2 >= durations2[noteIndex2]) {
    if (noteIndex2 < sizeof(melody2) / sizeof(int)) {
      previousMillis2 = currentMillis;
      tone(buzzer2, melody2[noteIndex2]);
    } else {
      noTone(buzzer2);
      finished2 = true;  // 标记旋律2播放完毕
    }
    noteIndex2++;
  }

  if (!finished3 && currentMillis - previousMillis3 >= durations3[noteIndex3]) {
    if (noteIndex3 < sizeof(melody3) / sizeof(int)) {
      previousMillis3 = currentMillis;
      tone(buzzer3, melody3[noteIndex3]);
    } else {
      noTone(buzzer3);
      finished3 = true;  // 标记旋律3播放完毕
    }
    noteIndex3++;
  }

  if (!finished4 && currentMillis - previousMillis4 >= durations4[noteIndex4]) {
    if (noteIndex4 < sizeof(melody4) / sizeof(int)) {
      previousMillis4 = currentMillis;
      tone(buzzer4, melody4[noteIndex4]);
    } else {
      noTone(buzzer4);
      finished4 = true;  // 标记旋律4播放完毕
    }
    noteIndex4++;
  }

  if (!finished5 && currentMillis - previousMillis5 >= durations5[noteIndex5]) {
    if (noteIndex5 < sizeof(melody5) / sizeof(int)) {
      previousMillis5 = currentMillis;
      tone(buzzer5, melody5[noteIndex5]);
    } else {
      noTone(buzzer5);
      finished5 = true;  // 标记旋律5播放完毕
    }
    noteIndex5++;
  }

  // 如果旋律都已经播放完毕，停止loop循环
  if (finished1 && finished2 && finished3 && finished4 && finished5) {
    noTone(buzzer1);  // 确保关闭buzzer1
    noTone(buzzer2);  // 确保关闭buzzer2
    noTone(buzzer3);
    noTone(buzzer4);
    noTone(buzzer5);
    ESP.deepSleep(0); // 永久休眠，直到设备复位
  }

}


